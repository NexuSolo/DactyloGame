/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package projet.cpoo;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Properties;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import projet.cpoo.Settings.Language;

public class App extends Application {

    private static Scene scene;
    private static Socket socket;

    public static void main(String[] args) {
        loadProperties();
        launch();
    }

    private static void loadProperties() {
        try {
            File file = new File(System.getProperty("user.home") + File.separator + ".Dactylo");
            if(!file.exists()) {
                file.mkdir();
            }
            file = new File(System.getProperty("user.home") + File.separator + ".Dactylo/config.properties");
            if(!file.exists()) {
                file.createNewFile();
                createProperties();
            }
            Properties prop = new Properties();
            prop.load(new FileInputStream(System.getProperty("user.home") + File.separator + ".Dactylo/config.properties"));
            Settings.setPseudo(prop.getProperty("pseudo", "joueur"));
            Settings.setIp(prop.getProperty("ip", "localhost"));
            try {
                Settings.setPort(Integer.parseInt(prop.getProperty("port", "5000")));
                if(Settings.getPort() < 0 || Settings.getPort() > 65535) {
                    prop.setProperty("port", "5000");
                    Settings.setPort(5000);
                }
            } catch (NumberFormatException e) {
                prop.setProperty("port", "5000");
                Settings.setPort(5000);
            }
            String langue = prop.getProperty("langue", "FR");
            if(langue.equals("FR")) {
                Settings.setLangue(Settings.Language.FR);
            } else if(langue.equals("EN")) {
                Settings.setLangue(Settings.Language.EN);
            } else {
                prop.setProperty("langue", "FR");
                Settings.setLangue(Settings.Language.FR);
            }
            try {
                Settings.setAccents(Boolean.parseBoolean(prop.getProperty("accent", "true")));
            } catch (NumberFormatException e) {
                prop.setProperty("accent", "true");
                Settings.setAccents(true);
            }
            try {
                Settings.setModeTemps(Boolean.parseBoolean(prop.getProperty("momodeTempsde", "true")));
            } catch (NumberFormatException e) {
                prop.setProperty("modeTemps", "true");
                Settings.setModeTemps(true);
            }
            try {
                Settings.setLIMITE_MAX(Integer.parseInt(prop.getProperty("LIMITE_MAX", "60")));
                if(Settings.getLIMITE_MAX() < 0) {
                    prop.setProperty("LIMITE_MAX", "60");
                    Settings.setLIMITE_MAX(60);
                }
            }
            catch (NumberFormatException e) {
                prop.setProperty("LIMITE_MAX", "60");
                Settings.setLIMITE_MAX(60);
            }
            try {
                Settings.setMortSubite(Boolean.parseBoolean(prop.getProperty("mort_subite", "false")));
            } catch (NumberFormatException e) {
                prop.setProperty("mort_subite", "false");
                Settings.setMortSubite(false);
            }
            createProperties();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void createProperties() {
        Properties prop = new Properties();
        try {
            prop.setProperty("pseudo", Settings.getPseudo());
            prop.setProperty("ip", Settings.getIp());
            prop.setProperty("port", String.valueOf(Settings.getPort()));
            prop.setProperty("langue", Settings.getLangue().toString());
            prop.setProperty("accent", String.valueOf(Settings.isAccents()));
            prop.setProperty("modeTemps", String.valueOf(Settings.isModeTemps()));
            prop.setProperty("LIMITE_MAX", String.valueOf(Settings.getLIMITE_MAX()));
            prop.setProperty("mort_subite", String.valueOf(Settings.isMortSubite()));
            prop.store(new FileOutputStream(System.getProperty("user.home") + File.separator + ".Dactylo/config.properties"), "Configuration du jeu");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public void start(Stage primaryStage) throws Exception {
        scene = new Scene(loadFXML("menu"),1280, 720);
        primaryStage.setMinHeight(675);
        primaryStage.setMinWidth(1200);
        primaryStage.setScene(scene);
        primaryStage.setOnCloseRequest( event -> {
            System.exit(0);
        });
        primaryStage.show();
        // primaryStage.toFront();
        //La fonction toFront() ne fonctionne pas chez moi donc j'utilise a la place :
        primaryStage.setAlwaysOnTop(true);
        primaryStage.setAlwaysOnTop(false);
    }

    public static void setRoot(String fxml) throws IOException {
        Platform.runLater(() -> {
            try {
                scene.setRoot(loadFXML(fxml));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    public static void setRoot(String fxml, Object controller) throws IOException {
        Platform.runLater(() -> {
            FXMLLoader fxmlLoader = new FXMLLoader(ClassLoader.getSystemResource(fxml + ".fxml"));
            fxmlLoader.setController(controller);
            try {
                scene.setRoot(fxmlLoader.load());
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    private static Parent loadFXML(String fxml) throws IOException {
        FXMLLoader fxmlLoader = new FXMLLoader(ClassLoader.getSystemResource(fxml + ".fxml"));
        return fxmlLoader.load();
    }

    public static String getPseudo() {
        return Settings.getPseudo();
    }

    public static void setPseudo(String pseudo) {
        Settings.setPseudo(pseudo);
        createProperties();
    }

    public static String getIp() {
        return Settings.getIp();
    }

    public static void setIp(String ip) {
        Settings.setIp(ip);
        createProperties();
    }

    public static int getPort() {
        return Settings.getPort();
    }

    public static void setPort(int port) {
        Settings.setPort(port);
        createProperties();
    }

    public static String getLangue() {
        return Settings.getLangue().toString();
    }

    public static void setLangue(Language langue) {
        Settings.setLangue(langue);
        createProperties();
    }

    public static boolean isAccent() {
        return Settings.isAccents();
    }

    public static void setAccent(boolean accent) {
        Settings.setAccents(accent);
        createProperties();
    }

    public static boolean getMode() {
        return Settings.isModeTemps();
    }

    public static void setMode(Boolean mode) {
        Settings.setModeTemps(mode);
        createProperties();
    }

    public static int getLIMITE_MAX() {
        return Settings.getLIMITE_MAX();
    }

    public static void setLIMITE_MAX(int n) {
        Settings.setLIMITE_MAX(n);
        createProperties();
    }

    public static Socket getSocket() {
        return socket;
    }

    public static void setSocket(Socket socket) {
        App.socket = socket;
    }

    public static boolean isMortSubite() {
        return Settings.isMortSubite();
    }

    public static void setMortSubite(boolean mortSubite) {
        Settings.setMortSubite(mortSubite);
        createProperties();
    }

}
