/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package projet.cpoo;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Properties;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class App extends Application {

    private static Scene scene;
    private static String pseudo = "Joueur";
    private static String ip = "localhost";
    private static int port = 5000;
    private static String langue = "Français";
    private static boolean accent = true;
    private static String mode = "Temps";
    private static int modenbr = 60;
    private static Socket socket;

    public static void main(String[] args) {
        loadProperties();
        launch();
    }

    private static void loadProperties() {
        try {
            Properties prop = new Properties();
            prop.load(new FileInputStream("config.properties"));
            pseudo = prop.getProperty("pseudo", "joueur");
            ip = prop.getProperty("ip", "localhost");
            try {
                port = Integer.parseInt(prop.getProperty("port", "5000"));
                if(port < 0 || port > 65535) {
                    prop.setProperty("port", "5000");
                    port = 5000;
                }
            } catch (NumberFormatException e) {
                prop.setProperty("port", "5000");
                port = 5000;
            }
            langue = prop.getProperty("langue", "Français");
            if(!langue.equals("Français") && !langue.equals("English")) {
                prop.setProperty("langue", "Français");
                langue = "Français";
            }
            try {
                accent = Boolean.parseBoolean(prop.getProperty("accent", "true"));
            } catch (NumberFormatException e) {
                prop.setProperty("accent", "true");
                accent = true;
            }
            if(!mode.equals("Temps") && !mode.equals("Points")) {
                prop.setProperty("mode", "Temps");
                mode = "Temps";
            }
            else {
                mode = prop.getProperty("mode", "Temps");
            }
            try {
                modenbr = Integer.parseInt(prop.getProperty("modenbr", "60"));
            } catch (NumberFormatException e) {
                prop.setProperty("modenbr", "60");
                modenbr = 60;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void createProperties() {
        Properties prop = new Properties();
        try {
            prop.setProperty("pseudo", pseudo);
            prop.setProperty("ip", ip);
            prop.setProperty("port", String.valueOf(port));
            prop.setProperty("langue", langue);
            prop.setProperty("accent", String.valueOf(accent));
            prop.setProperty("mode", mode);
            prop.setProperty("modenbr", String.valueOf(modenbr));
            prop.store(new FileOutputStream("config.properties"), "Configuration du jeu");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public void start(Stage primaryStage) throws Exception {
        scene = new Scene(loadFXML("menu"),1280, 720);
        primaryStage.setMinHeight(675);
        primaryStage.setMinWidth(1200);
        primaryStage.setScene(scene);
        primaryStage.setOnCloseRequest( event -> {
            System.exit(0);
        });
        primaryStage.show();
        // primaryStage.toFront();
        //La fonction toFront() ne fonctionne pas chez moi donc j'utilise a la place :
        primaryStage.setAlwaysOnTop(true);
        primaryStage.setAlwaysOnTop(false);
    }

    public static void setRoot(String fxml) throws IOException {
        Platform.runLater(() -> {
            try {
                scene.setRoot(loadFXML(fxml));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    public static void setRoot(String fxml, Object controller) throws IOException {
        Platform.runLater(() -> {
            FXMLLoader fxmlLoader = new FXMLLoader(ClassLoader.getSystemResource(fxml + ".fxml"));
            fxmlLoader.setController(controller);
            try {
                scene.setRoot(fxmlLoader.load());
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    private static Parent loadFXML(String fxml) throws IOException {
        FXMLLoader fxmlLoader = new FXMLLoader(ClassLoader.getSystemResource(fxml + ".fxml"));
        return fxmlLoader.load();
    }

    public static String getPseudo() {
        return pseudo;
    }

    public static void setPseudo(String pseudo) {
        App.pseudo = pseudo;
        createProperties();
    }

    public static String getIp() {
        return ip;
    }

    public static void setIp(String ip) {
        App.ip = ip;
        createProperties();
    }

    public static int getPort() {
        return port;
    }

    public static void setPort(int port) {
        App.port = port;
        createProperties();
    }

    public static String getLangue() {
        return langue;
    }

    public static void setLangue(String langue) {
        App.langue = langue;
        createProperties();
    }

    public static boolean isAccent() {
        return accent;
    }

    public static void setAccent(boolean accent) {
        App.accent = accent;
        createProperties();
    }

    public static String getMode() {
        return mode;
    }

    public static void setMode(String mode) {
        App.mode = mode;
        createProperties();
    }

    public static int getModenbr() {
        return modenbr;
    }

    public static void setModenbr(int modenbr) {
        App.modenbr = modenbr;
        createProperties();
    }

    public static Socket getSocket() {
        return socket;
    }

    public static void setSocket(Socket socket) {
        App.socket = socket;
    }

}
